{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Constants, Notifications, Permissions } from 'expo';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction getiOSNotificationPermission() {\n  var _await$Permissions$ge, status;\n\n  return _regeneratorRuntime.async(function getiOSNotificationPermission$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 2:\n          _await$Permissions$ge = _context.sent;\n          status = _await$Permissions$ge.status;\n\n          if (!(status !== 'granted')) {\n            _context.next = 6;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar HomeScreen = function (_Component) {\n  _inherits(HomeScreen, _Component);\n\n  var _super = _createSuper(HomeScreen);\n\n  function HomeScreen() {\n    var _this;\n\n    _classCallCheck(this, HomeScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._handleButtonPress = function () {\n      var localnotification = {\n        title: 'Notification!',\n        body: 'This is your affirmation to dream lucidly.',\n        data: {\n          thisIsYourData: 'your data'\n        },\n        android: {\n          channelId: 'alarm'\n        },\n        ios: {\n          sound: true\n        }\n      };\n      var sendAfterFiveSeconds = Date.now();\n      sendAfterFiveSeconds += 5000;\n      var schedulingOptions = {\n        time: sendAfterFiveSeconds\n      };\n      Notifications.scheduleLocalNotificationAsync(localnotification, schedulingOptions);\n    };\n\n    _this.listenForNotifications = function () {\n      Notifications.addListener(_this._handleNotification);\n    };\n\n    _this._handleNotification = function (_ref) {\n      var origin = _ref.origin,\n          data = _ref.data,\n          remote = _ref.remote;\n      var type = remote ? 'Push' : 'Local';\n      var info = type + \" notification \" + origin + \" with data: \" + JSON.stringify(data);\n      Alert.alert('Notification!', info);\n    };\n\n    return _this;\n  }\n\n  _createClass(HomeScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (Platform.OS === 'android') {\n                Expo.Notifications.createChannelAndroidAsync('alarm', {\n                  name: 'Alarms',\n                  priority: 'max',\n                  vibrate: [0, 250, 250, 250],\n                  sound: true\n                });\n              }\n\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(getiOSNotificationPermission());\n\n            case 3:\n              this.listenForNotifications();\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _jsx(View, {\n        style: styles.container,\n        children: _jsx(Button, {\n          title: \"Send a notification in 5 seconds!\",\n          onPress: this._handleButtonPress\n        })\n      });\n    }\n  }]);\n\n  return HomeScreen;\n}(Component);\n\nexport { HomeScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1'\n  }\n});","map":{"version":3,"sources":["C:/Users/Lenovo/Documents/projectbaru/App.js"],"names":["React","Component","Constants","Notifications","Permissions","getiOSNotificationPermission","getAsync","NOTIFICATIONS","status","HomeScreen","_handleButtonPress","localnotification","title","body","data","thisIsYourData","android","channelId","ios","sound","sendAfterFiveSeconds","Date","now","schedulingOptions","time","scheduleLocalNotificationAsync","listenForNotifications","addListener","_handleNotification","origin","remote","type","info","JSON","stringify","Alert","alert","Platform","OS","Expo","createChannelAndroidAsync","name","priority","vibrate","styles","container","StyleSheet","create","flex","alignItems","justifyContent","paddingTop","statusBarHeight","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Platform, View, StyleSheet, Button, Alert } from 'react-native';\nimport { Constants, Notifications, Permissions } from 'expo';\n\nasync function getiOSNotificationPermission() {\n  const { status } = await Permissions.getAsync(\n    Permissions.NOTIFICATIONS\n  );\n  if (status !== 'granted') {\n    return;\n  }\n}\n\nexport default class HomeScreen extends Component {\n  _handleButtonPress = () => {\n    const localnotification = {\n      title: 'Notification!',\n      body: 'This is your affirmation to dream lucidly.',\n      data: {\n        thisIsYourData: 'your data',\n      },\n      android: {\n        channelId: 'alarm',\n      },\n      ios: {\n        sound: true,\n      },\n    };\n    let sendAfterFiveSeconds = Date.now();\n    sendAfterFiveSeconds += 5000;\n\n    const schedulingOptions = { time: sendAfterFiveSeconds };\n    Notifications.scheduleLocalNotificationAsync(\n      localnotification,\n      schedulingOptions\n    );\n  };\n  listenForNotifications = () => {\n    Notifications.addListener(\n      this._handleNotification\n    )\n  };\n\n  _handleNotification = ({ origin, data, remote }) => {\n    let type = remote ? 'Push' : 'Local'\n    let info = `${type} notification ${origin} with data: ${JSON.stringify(data)}`\n    Alert.alert('Notification!', info)\n  }\n\n  async componentDidMount() {\n    if (Platform.OS === 'android') {\n      Expo.Notifications.createChannelAndroidAsync('alarm', {\n        name: 'Alarms',\n        priority: 'max',\n        vibrate: [0, 250, 250, 250],\n        sound: true,\n      });\n    }\n    await getiOSNotificationPermission();\n    this.listenForNotifications();\n  }\n  render() {\n    return (\n      <View style={styles.container}>\n\n        <Button\n          title=\"Send a notification in 5 seconds!\"\n          onPress={this._handleButtonPress}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#ecf0f1',\n  }\n});"]},"metadata":{},"sourceType":"module"}